(* For each instruction, for each read performed by the translation
   table walk ASL code, we generate one translate-read (T) event. If
   the translation finds an invalid entry, the translate-read event
   will additionally belong to T_f. *)
set T
set T_f

(* T events which are part of a Stage 1 or 2 walk *)
set Stage1
set Stage2

(* A write of an invalid descriptor (an even value) is in W_invalid *)
define has_even_value(ev: Event): bool =
  ev.data[0 .. 0] == 0b0

define W_invalid(ev: Event): bool = W(ev) & has_even_value(ev)

(* A write of a valid descriptor (an odd value) is in W_valid *)
define W_valid(ev: Event): bool = W(ev) & ~W_invalid(ev)

relation iio
relation instruction-order

(* e1 speculative e2
 * iff e2 was conditionally executed based on the value of e1
 *)
let speculative =
    ctrl
  | addr; po
  | [T] ; instruction-order

(* po-pa relates all events from instructions in instruction-order to the same PA *)
let po-pa = (instruction-order | iio) & loc

(* Context changing operations
 * are those that write to system registers
 *)
define ContextChange(ev: Event): bool = MSR(ev) | TE(ev) | ERET(ev)

(* Context synchronisation events
 *)
define CSE(ev: Event): bool = ISB(ev) | TE(ev) | ERET(ev)

(* TODO: read these off the interface *)
accessor Fault: bool = is false
accessor IsTranslationFault: bool = is false
accessor IsPermissionFault: bool = is false
define Fault_T(ev: Event): bool = Fault(ev) & IsTranslationFault(ev)
define Fault_P(ev: Event): bool = Fault(ev) & IsPermissionFault(ev)
accessor IsFromR: bool = is false
accessor IsFromW: bool = is false
accessor IsFromReleaseW: bool = is false

(* A TLBI barriers some writes, making them unobservable to "future" reads from a translation table walk.
 *
 * tseq1 relates writes with TLBIs that ensure their visibility
 * e.g.  `a: Wpte(x) ; b: Wpte(x) ; c: Wpte(x) ; d: TLBI x`
 *  then `c ; tseq1 ; d`
 *  as a, b are no longer visible to translation table walks
 *)
let tlb_might_affect =
    [ TLBI-S1 & ~TLBI-S2 &  TLBI-VA  &  TLBI-ASID & TLBI-VMID] ; (tlbi-translate-same-va-page & tlbi-translate-same-asid & tlbi-translate-same-vmid) ; [T & Stage1]
  | [ TLBI-S1 & ~TLBI-S2 &  TLBI-VA  &  TLBI-ASID & ~TLBI-VMID] ; (tlbi-translate-same-va-page & tlbi-translate-same-asid) ; [T & Stage1]
  | [ TLBI-S1 & ~TLBI-S2 & ~TLBI-VA  &  TLBI-ASID & TLBI-VMID] ; (tlbi-translate-same-asid & tlbi-translate-same-vmid) ; [T & Stage1]
  | [ TLBI-S1 & ~TLBI-S2 & ~TLBI-VA  & ~TLBI-ASID & TLBI-VMID] ; tlbi-translate-same-vmid ; [T & Stage1]
  | [~TLBI-S1 &  TLBI-S2 &  TLBI-IPA & ~TLBI-ASID & TLBI-VMID] ; (tlbi-translate-same-ipa-page & tlbi-translate-same-vmid) ; [T & Stage2]
  | [~TLBI-S1 &  TLBI-S2 & ~TLBI-IPA & ~TLBI-ASID & TLBI-VMID] ; tlbi-translate-same-vmid ; [T & Stage2]
  | [ TLBI-S1 &  TLBI-S2 & ~TLBI-IPA & ~TLBI-ASID & TLBI-VMID] ; tlbi-translate-same-vmid ; [T]
  | ( TLBI-S1 &            ~TLBI-IPA & ~TLBI-ASID & ~TLBI-VMID) * (T & Stage1)
  | (            TLBI-S2 & ~TLBI-IPA & ~TLBI-ASID & ~TLBI-VMID) * (T & Stage2)
(*  | (TLBI-ALL * T) *)

let tlb-affects =
    [TLBI-IS] ; tlb_might_affect
  | ([~TLBI-IS] ; tlb_might_affect) & int

(* [T] -> [TLBI] where the T reads-from a write before the TLBI and the TLBI is to the same addr 
 * this doesn't mean the T happened before the TLBI, but it does mean there could have been a cached version
 * which the TLBI threw away
 *)
let maybe_TLB_cached =
  ([T] ; trf^-1 ; wco ; [TLBI-S1]) & tlb-affects^-1

(* translation-ordered-before *)
let tob =
  (* a faulting translation must read from flat memory or newer *)
    [T_f] ; tfr
  (* no forwarding from speculative writes *)
  | speculative ; trfi

let tlb_barriered =
  ([T] ; tfr ; wco ; [TLBI]) & tlb-affects^-1

let obtlbi_translate =
  (* A S1 translation must read from TLB/memory before the TLBI which
   * invalidates that entry happens *)
  [T & Stage1] ; tlb_barriered ; [TLBI-S1]
  (* if the S2 translation is ordered before some S2 write
   * then the S1 translation has to be ordered before the subsequent
   * S1 invalidate which would force the S2 write to be visible
   *
   * this applies to S2 translations during a S1 walk as well
   * here the Stage2 translation is only complete once the TLBI VA which
   * invalidates previous translation-table-walks have been complete *)
  (* if the S1 translation is from after the TLBI VA
   * then the S2 translation is only ordered after the TLBI IPA
   *)
  | ([T & Stage2] ; tlb_barriered ; [TLBI-S2])
     & (same-translation ; [T & Stage1] ; trf^-1 ; wco^-1)
  (* if the S1 translation is from before the TLBI VA,
   * then the S2 translation is ordered after the TLBI VA
   *)
  | (([T & Stage2] ; tlb_barriered ; [TLBI-S2]) ; wco? ; [TLBI-S1])
    & (same-translation ; [T & Stage1] ; maybe_TLB_cached)

(* ordered-before-TLBI *)
let obtlbi =
    obtlbi_translate
  (*
   * a TLBI ensures all instructions that use the old translation
   * and their respective memory events
   * are ordered before the TLBI.
   *)
  | [R|W|Fault] ; iio^-1 ; (obtlbi_translate & ext) ; [TLBI]

(* context-change ordered-before *)
(* note that this is under-approximate and future work is needed
 * on exceptions and context-changing operations in general *)
let ctxob =
 (* no speculating past context-changing operations *)
    speculative ; [MSR]
 (* context-synchronization orders everything po-after with the synchronization point *)
  | [CSE] ; instruction-order
 (* context-synchronization acts as a barrier for context-changing operations *)
  | [ContextChange] ; po ; [CSE]
 (* context-synchronization-events cannot happen speculatively *)
  | speculative ; [CSE]

(* ordered-before a translation fault *)
let obfault =
    data ; [Fault_T & IsFromW]
  | speculative ; [Fault_T & IsFromW]
  | [dmbst] ; po ; [Fault_T & IsFromW]
  | [dmbld] ; po ; [Fault_T & (IsFromW | IsFromR)]
  | [A|Q] ; po ; [Fault_T & (IsFromW | IsFromR)]
  | [R|W] ; po ; [Fault_T & IsFromW & IsFromReleaseW]

(* ETS-ordered-before *)
(* if FEAT_ETS then if E1 is ordered-before some Fault
 * then E1 is ordered-before the translation-table-walk read which generated that fault
 * (but not *every* read from the walk, only the one that directly led to the translation fault)
 *
 * Additionally, if ETS then TLBIs are guaranteed completed after DSBs
 * hence po-later translations must be ordered after the TLBI (D5.10.2)
 *)
let obETS =
    (obfault ; [Fault_T]) ; iio^-1 ; [T_f]
  | ([TLBI] ; po ; [dsb] ; instruction-order ; [T]) & tlb-affects