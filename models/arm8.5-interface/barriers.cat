(* ********************************************************************** *)
(* BSD 2-Clause License                                                   *)
(*                                                                        *)
(* Copyright (c) 2022 Alasdair Armstrong                                  *)
(*                                                                        *)
(* All rights reserved.                                                   *)
(*                                                                        *)
(* Redistribution and use in source and binary forms, with or without     *)
(* modification, are permitted provided that the following conditions are *)
(* met:                                                                   *)
(*                                                                        *)
(* 1. Redistributions of source code must retain the above copyright      *)
(* notice, this list of conditions and the following disclaimer.          *)
(*                                                                        *)
(* 2. Redistributions in binary form must reproduce the above copyright   *)
(* notice, this list of conditions and the following disclaimer in the    *)
(* documentation and/or other materials provided with the distribution.   *)
(*                                                                        *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *)
(* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  *)
(* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   *)
(* HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, *)
(* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       *)
(* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  *)
(* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  *)
(* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    *)
(* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  *)
(* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *)
(* ********************************************************************** *)

enum MBReqDomain = {
  MBReqDomain_Nonshareable,
  MBReqDomain_InnerShareable,
  MBReqDomain_OuterShareable,
  MBReqDomain_FullSystem
}

enum MBReqTypes = {MBReqTypes_Reads, MBReqTypes_Writes, MBReqTypes_All}

accessor is_dmb: bool = .match { Barrier_DMB => true, _ => false }
accessor is_dsb: bool = .match { Barrier_DSB => true, _ => false }
accessor is_isb: bool = .match { Barrier_ISB => true, _ => false }

define ISB(ev: Event): bool = is_isb(ev)

accessor barrier_domain: MBReqDomain = .match { Barrier_DSB => .domain, Barrier_DMB => .domain, _ => default }
accessor barrier_types: MBReqTypes = .match { Barrier_DSB => .types, Barrier_DMB => .types, _ => default }

define is_dmb_barrier(ev: Event, d: MBReqDomain, t: MBReqTypes): bool =
    is_dmb(ev) & (barrier_domain(ev) == d) & (barrier_types(ev) == t)

define is_dsb_barrier(ev: Event, d: MBReqDomain, t: MBReqTypes): bool =
    is_dsb(ev) & (barrier_domain(ev) == d) & (barrier_types(ev) == t)

(* we do not model NSH so pretend it's SY *)
define dsbsy(ev: Event): bool =
    is_dsb(ev) & (barrier_types(ev) == MBReqTypes_All)

define dsbst(ev: Event): bool =
    dsbsy(ev) | (is_dsb(ev) & (barrier_types(ev) == MBReqTypes_Writes))

define dsbld(ev: Event): bool =
    dsbsy(ev) | (is_dsb(ev) & (barrier_types(ev) == MBReqTypes_Reads))

define dsbnsh(ev: Event): bool = is_dsb_barrier(ev, MBReqDomain_Nonshareable, MBReqTypes_All)

define dmbsy(ev: Event): bool =
     dsbsy(ev) | is_dmb_barrier(ev, MBReqDomain_FullSystem, MBReqTypes_All)

define dmbst(ev: Event): bool =
     dmbsy(ev) | dsbst(ev) | is_dmb_barrier(ev, MBReqDomain_FullSystem, MBReqTypes_Writes)

define dmbld(ev: Event): bool =
     dmbsy(ev) | dsbld(ev) | is_dmb_barrier(ev, MBReqDomain_FullSystem, MBReqTypes_Reads)

define dmb(ev: Event): bool = dmbst(ev) | dmbld(ev)
define dsb(ev: Event): bool = dsbst(ev) | dsbld(ev)

(* F for fences *)
accessor F: bool = is sail_barrier