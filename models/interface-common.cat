(* F for all fences *)
accessor F: bool = is sail_barrier

(* read/write *)
# accessor R: bool = is sail_mem_read
# accessor W: bool = is sail_mem_write

enum Access_strength = {
  AS_normal,
  AS_rel_or_acq, # Release or acquire
  AS_acq_rcpc # Release-consistency with processor consistency
}

accessor Explicit: bool = .access_kind.match {
    AK_explicit => true,
    _ => false
}

accessor RelAcq: bool = .access_kind.strength.match {
    AS_rel_or_acq => true,
    _ => false
}

accessor AcqRCpc: bool = .access_kind.strength.match {
    AS_acq_rcpc => true,
    _ => false
}

define A(ev: Event): bool =
    R(ev) & Explicit(ev) & RelAcq(ev)

define Q(ev: Event): bool =
    R(ev) & Explicit(ev) & AcqRCpc(ev)

define L(ev: Event): bool =
    W(ev) & Explicit(ev) & RelAcq(ev)

(* branches *)
define B(ev: Event): bool = false

(* cache op *)
(* tlbis are a kind of cache op ?*)
accessor is_cacheop: bool = is sail_cache_op
accessor is_tlbi: bool = is sail_tlbi
define C(ev: Event): bool = is_cacheop(ev) | is_tlbi(ev)

(* tlbi *)
accessor TLBI: bool = is sail_tlbi

(* exceptions *)
accessor TE: bool = is sail_take_exception
accessor ERET: bool = is sail_return_exception