(* ********************************************************************** *)
(* BSD 2-Clause License                                                   *)
(*                                                                        *)
(* Copyright (c) 2022 Alasdair Armstrong                                  *)
(*                                                                        *)
(* All rights reserved.                                                   *)
(*                                                                        *)
(* Redistribution and use in source and binary forms, with or without     *)
(* modification, are permitted provided that the following conditions are *)
(* met:                                                                   *)
(*                                                                        *)
(* 1. Redistributions of source code must retain the above copyright      *)
(* notice, this list of conditions and the following disclaimer.          *)
(*                                                                        *)
(* 2. Redistributions in binary form must reproduce the above copyright   *)
(* notice, this list of conditions and the following disclaimer in the    *)
(* documentation and/or other materials provided with the distribution.   *)
(*                                                                        *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *)
(* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  *)
(* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   *)
(* HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, *)
(* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       *)
(* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  *)
(* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  *)
(* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    *)
(* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  *)
(* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *)
(* ********************************************************************** *)

enum Regime = {Regime_EL3, Regime_EL30, Regime_EL2, Regime_EL20, Regime_EL10}

enum TLBIOp = {
  TLBIOp_DALL,
  TLBIOp_DASID,
  TLBIOp_DVA,
  TLBIOp_IALL,
  TLBIOp_IASID,
  TLBIOp_IVA,
  TLBIOp_ALL,
  TLBIOp_ASID,
  TLBIOp_IPAS2,
  TLBIOp_VAA,
  TLBIOp_VA,
  TLBIOp_VMALL,
  TLBIOp_VMALLS12,
  TLBIOp_RIPAS2,
  TLBIOp_RVAA,
  TLBIOp_RVA,
  TLBIOp_RPA,
  TLBIOp_PAALL
}

enum Shareability = {Shareability_NSH, Shareability_ISH, Shareability_OSH}

accessor tlbi_vmid: bits(16) = .rec.vmid
accessor tlbi_asid: bits(16) = .rec.asid

(* TODO:
 * these TLBI-* need careful checking, there are lots of TLBIOp and complex combinations
 *)

accessor TLBI-ASID: bool = .rec.op.match {
    TLBIOp_ASID => true,
    TLBIOp_VA => true,
    TLBIOp_VAA => true,
    _ => false
}


accessor TLBI-S1: bool = .rec.op.match {
    TLBIOp_VA => true,
    TLBIOp_VMALLS12 => true,
    TLBIOp_VMALL => true,
    TLBIOp_ALL => true,
    TLBIOp_ASID => true,
    _ => false
}

accessor TLBI-S2: bool = .rec.op.match {
    TLBIOp_IPAS2 => true,
    TLBIOp_VMALLS12 => true,
    _ => false
}

accessor TLBI-VMID: bool = .rec.op.match {
    TLBIOp_VA => true,
    TLBIOp_VAA => true,
    TLBIOp_IPAS2 => true,
    TLBIOp_VMALLS12 => true,
    TLBIOp_VMALL => true,
    TLBIOp_ASID => true,
    _ => false
}

accessor TLBI-EL1: bool = .rec.regime.match {
    Regime_EL10 => true,
    _ => false
}
accessor TLBI-EL2: bool = .rec.regime.match {
    Regime_EL2 => true,
    _ => false
}

accessor TLBI-VA: bool = .rec.op.match {
    TLBIOp_VA => true,
    _ => false
}

accessor TLBI-IPA: bool = .rec.op.match {
    TLBIOp_IPAS2 => true,
    TLBIType_IPAS2E1IS => true,
    _ => false
}

accessor TLBI-IS: bool = .shareability.match {
    Shareability_ISH => true,
    Shareability_OSH => true,
    _ => false
}

(* read ASID/VMID from the register read *)

set read_VMID
set read_ASID
relation same-translation

define tlbi-to-asid-read(ev1: Event, ev2: Event): bool =
    TLBI-ASID(ev1) & AT(ev2) & read_ASID(ev2) & (tlbi_asid(ev1) == extract(63, 48, val_of_read_ASID(ev2)))

define tlbi-to-vmid-read(ev1: Event, ev2: Event): bool =
    TLBI-VMID(ev1) & AT(ev2) & read_ASID(ev2) & (tlbi_vmid(ev1) == extract(63, 48, val_of_read_VMID(ev2)))

(* Currently we only use same-vmid/same-asid between TLBIs and
 * translates, so this relation defines them in a minimal way.
 *)
let translate-same-vmid = tlbi-to-vmid-read; [read_VMID]; same-translation
let translate-same-asid = tlbi-to-asid-read; [read_ASID]; same-translation